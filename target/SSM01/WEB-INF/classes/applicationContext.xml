<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--spring容器(六步/七步)  用于整合spring和mybatis-->

    <!--1.扫描包-->
    <context:component-scan base-package="com.swjd.*"/>

    <!--2.加载外部数据库配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--3.配置德鲁伊连接池-->
    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
    </bean>

    <!--4.整合mybatis框架（获取一个mybatis工厂）-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="ds"/>
        <property name="typeAliasesPackage" value="com.swjd.bean"/>
        <property name="mapperLocations" value="classpath:com/swjd/mapper/*.xml"/>
    </bean>

    <!--5.配置mybatis接口层，自动生成实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.swjd.mapper"/>
    </bean>

    <!--6.配置声明式事务-->
    <!--1)配置平台-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="ds"/>
    </bean>
    <!--2)开启注解配置-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>